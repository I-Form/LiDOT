function [StressStrain,AnalysisTime]=ImplicitBeamFEA(Geometry,FEA_Opts)
Plots=0;

%% DEFAULT Analysis Options
%abaqusInpFileNamePart= ['opt_' num2str(Taper(2)*10) ];   % Defining Abaqus file names
Opts.FileName= 'OptRun';   % Defining Abaqus file names
Opts.appliedStrain=-0.8;   %Applied strain to top plate (in Y direction)

% Step Settings (Initial increment size, total time, min size, max size)
Opts.StepParameters=[0.1 1 1e-20 0.05]; %[0.05 1 1e-9 0.05];
MAXIncr=10000;

% Contact and BCs
Opts.StrutContact=1;          %Strut contact on (1) / off (0) / 2 defining surfaces
Opts.BCsetting=1;            %0 - prevent rigid body movements, 1 is x and y symmetry, 2 is laterally constrained top and bottom,3 just bottom

%% DEFAULT Material Parameters
Opts.PlasticOn= 1;   %0 for off, 1 for on

% 17-4 PH (B) No Heat treatment - Data Sheet
Opts.Elastic=[200000 0.3];
Opts.Plastc=[620 0; 1100 0.16];
Opts.Density=7.8e-9;

Opts.FrictionCoeff=0;

%% Change parameters accoring to FEA Options Input
Fields=fieldnames(FEA_Opts);
for i=1:numel(Fields)
    Opts.(Fields{i})=FEA_Opts.(Fields{i});
end

%% Define variables for lattice Geometry
V = Geometry.V;
E = Geometry.E;
element_normals = Geometry.element_normals;
S_E = Geometry.S_E;
Diameters = Geometry.Diameters;
clearence = Geometry.clearence;

% Define some variables based on inputs
el_per_strut=Geometry.lattice_params.el_per_strut;  
elementtype=size(E,2) - 2;      
ConExcl=round((el_per_strut/4));           %Number of elements excluded from contact at nodes


%% Path names Control parameters
savePath =fullfile(fileparts(mfilename('fullpath')),'\abq_out');
%savePath=fullfile(defaultFolder,'data','temp');

abaqusInpFileName=fullfile(savePath,[Opts.FileName,'.inp']); %INP file name
abaqusDATFileName=fullfile(savePath,[Opts.FileName,'.dat']); %DAT file name


%% Top/Bottom Surfaces, and Corner Nodes for BCs
% % Find top/bottom and sides
Vind=1:size(V,1);

VBottom=Vind(V(:,3)==min(V(:,3)));
EBotttom= E(:,1)==VBottom | E(:,2)==VBottom | E(:,3)==VBottom;
EBotttom=logical(sum(EBotttom,2));

VTop=Vind(V(:,3)==max(V(:,3))); 
ETop= E(:,1)==VTop | E(:,2)==VTop | E(:,3)==VTop;
ETop=logical(sum(ETop,2));

logicXFace=V(:,1)==min(V(:,1)); 
logicYFace=V(:,2)==min(V(:,2)); 

%Prescribed displacement nodes
% bcPrescribeList=find(logicTop); 
% bcRigidList=find(logicBottom);

%X and Z faces
bcXFace=find(logicXFace); 
bcYFace=find(logicYFace);


%% Get Size of Part
GeomSize(1,:) = max(V,[],1); GeomSize(2,:) = min(V,[],1); 
GeomSize(3,:)=abs(diff(GeomSize,[],1));
BotPHeight = GeomSize(2,3) - clearence(1) ; 
TopPHeight = GeomSize(1,3) + clearence(2) ;
% TopPHeight=GeomSize(1,3)+0.5*(max(Diameters(ETop)));  %Set bottom plate to minumum Y
% BotPHeight=GeomSize(2,3)-0.5*(max(Diameters(EBotttom)));  %Set bottom plate to max Y
displacementMagnitude=GeomSize(3,3)*Opts.appliedStrain; 

% Adds normal nodes (used for beam section definition) to node array
V = [V; element_normals];  

E_Vectors=V(E(:,end),:) - V(E(:,1),:);  %gets vector of direction of each element
E_Lengths=sqrt( (E_Vectors(:,1)).^2 + (E_Vectors(:,2)).^2 + (E_Vectors(:,3)).^2);   %Get length of each element

%% Plot abaqus input geometry
Xstruts= [V(E(:,1),1) V(E(:,end-1),1)]';
Ystruts= [V(E(:,1),2) V(E(:,end-1),2)]';
Zstruts= [V(E(:,1),3) V(E(:,end-1),3)]';

if Plots ==1
    cFigure;
    plot3(Xstruts,Ystruts,Zstruts,'-r.','LineWidth',3,'MarkerSize',20,'MarkerEdgeColor','k','MarkerFaceColor','k')
    hold on
    plot3(NormalV(:,1),NormalV(:,2),NormalV(:,3),'*y')
    hold off
    axisGeom(gca,20);
    camlight headlight;
     title('Abaqus Input')
    drawnow;
end

E_Vectors=V(E(:,end),:) - V(E(:,1),:);  %gets vector of direction of each element
E_Lengths=sqrt( (E_Vectors(:,1)).^2 + (E_Vectors(:,2)).^2 + (E_Vectors(:,3)).^2);   %Get length of each element

%% Defining the abaqus input structure
% See also |abaqusStructTemplate| and |abaqusStruct2inp| and the abaqus user
% manual


%%--> Heading
abaqus_spec.Heading.COMMENT{1}='Job name: ABAQUS inp file creation demo';
abaqus_spec.Heading.COMMENT{2}='Generated by: GIBBON';

%%--> Preprint
abaqus_spec.Preprint.ATTR.echo='NO';
abaqus_spec.Preprint.ATTR.model='NO';
abaqus_spec.Preprint.ATTR.history='NO';
abaqus_spec.Preprint.ATTR.contact='YES';

%--> Part

% Node
nodeIds=(1:1:size(V,1))';
abaqus_spec.Part{1}.COMMENT='This section defines the part geometry in terms of nodes and elements';
abaqus_spec.Part{1}.ATTR.name='Cube';
abaqus_spec.Part{1}.Node={nodeIds,V};

% Element
elementIds=(1:1:size(E,1))';

if elementtype==2   %Quadratic Elements
    abaqus_spec.Part{1}.Element{1}.ATTR.type='B32';
elseif elementtype==1   %Linear Elements
    abaqus_spec.Part{1}.Element{1}.ATTR.type='B31';
end
abaqus_spec.Part{1}.Element{1}.VAL={elementIds(:),E};

% Element sets 
% All Elements
abaqus_spec.Part{1}.Elset{1}.ATTR.elset='AllEl'; 
abaqus_spec.Part{1}.Elset{1}.VAL=elementIds;

% Elements at lattice nodes (to stiffen nodes)
NodeEls=reshape( S_E(:,[1 end]) , numel(S_E(:,[1 end])),1);
abaqus_spec.Part{1}.Elset{2}.ATTR.elset='NodeEL';
abaqus_spec.Part{1}.Elset{2}.VAL=NodeEls' ;


%Create element sets for each different diameter set
Diameters=round(Diameters,6);
[UniqueDiams,~,~]=unique(Diameters,'stable');
for i = 1:numel(UniqueDiams)
    DiameterGroup= elementIds(Diameters==UniqueDiams(i));
    abaqus_spec.Part{1}.Elset{2+i}.ATTR.elset=['DiameterGroup_' num2str(i)];
    abaqus_spec.Part{1}.Elset{2+i}.VAL=DiameterGroup;
end


% Sections
for i = 1:numel(UniqueDiams) 
    abaqus_spec.Part{1}.Beam_section{i}.ATTR.elset=['DiameterGroup_' num2str(i)];
    abaqus_spec.Part{1}.Beam_section{i}.ATTR.material='Steel';
    abaqus_spec.Part{1}.Beam_section{i}.ATTR.temperature='GRADIENTS';
    abaqus_spec.Part{1}.Beam_section{i}.ATTR.section='CIRC';
    abaqus_spec.Part{1}.Beam_section{i}.VAL{1,1}={UniqueDiams(i)/2};
end


%Surfaces - rigid plates
abaqus_spec.Part{2}.COMMENT='This section defines the part geometry in terms of nodes and elements';
abaqus_spec.Part{2}.ATTR.name='rigid_plate';
PlateRefNode=[0 0 0];
abaqus_spec.Part{2}.Node={1,PlateRefNode};

abaqus_spec.Part{2}.surface.ATTR.type='cylinder';
abaqus_spec.Part{2}.surface.ATTR.name='rigid_plate';
abaqus_spec.Part{2}.surface.VAL{1,1}={{'START'}, [10+GeomSize(3,1) 0]};
abaqus_spec.Part{2}.surface.VAL{2,1}={{'LINE'},[-(10+GeomSize(3,1)) 0] };

%Rigid Body
abaqus_spec.Part{2}.rigid_body.ATTR.analytical_surface='rigid_plate';
abaqus_spec.Part{2}.rigid_body.ATTR.ref_node=1;

%%--> Assembly
abaqus_spec.Assembly.ATTR.name='Assembly-1';
abaqus_spec.Assembly.Instance{1}.ATTR.name='Cube-assembly';
abaqus_spec.Assembly.Instance{1}.ATTR.part='Cube';

abaqus_spec.Assembly.Instance{2}.ATTR.name='rigid_plate_1';
abaqus_spec.Assembly.Instance{2}.ATTR.part='rigid_plate';
abaqus_spec.Assembly.Instance{2}.VAL{1,1}={[ 0 0 BotPHeight]};
abaqus_spec.Assembly.Instance{2}.VAL{2,1}={[ 0 0 BotPHeight 1 0 BotPHeight -90]};

abaqus_spec.Assembly.Instance{3}.ATTR.name='rigid_plate_2';
abaqus_spec.Assembly.Instance{3}.ATTR.part='rigid_plate';
abaqus_spec.Assembly.Instance{3}.VAL{1,1}={[ 0 0 TopPHeight]};
abaqus_spec.Assembly.Instance{3}.VAL{2,1}={[ 0 0 TopPHeight 1 0 TopPHeight 90]};


abaqus_spec.Assembly.Nset{1}.ATTR.nset='Top';
abaqus_spec.Assembly.Nset{1}.ATTR.instance='rigid_plate_2';
abaqus_spec.Assembly.Nset{1}.VAL=1;

abaqus_spec.Assembly.Nset{2}.ATTR.nset='Bottom';
abaqus_spec.Assembly.Nset{2}.ATTR.instance='rigid_plate_1';
abaqus_spec.Assembly.Nset{2}.VAL=1;

abaqus_spec.Assembly.Nset{3}.ATTR.nset='all';
abaqus_spec.Assembly.Nset{3}.ATTR.instance='Cube-assembly';
abaqus_spec.Assembly.Nset{3}.VAL=1:1:size(V,1);

abaqus_spec.Assembly.Nset{4}.ATTR.nset='XFace';
abaqus_spec.Assembly.Nset{4}.ATTR.instance='Cube-assembly';
abaqus_spec.Assembly.Nset{4}.VAL=bcXFace';

abaqus_spec.Assembly.Nset{5}.ATTR.nset='YFace';
abaqus_spec.Assembly.Nset{5}.ATTR.instance='Cube-assembly';
abaqus_spec.Assembly.Nset{5}.VAL=bcYFace';

abaqus_spec.Assembly.Nset{6}.ATTR.nset='TopFace';
abaqus_spec.Assembly.Nset{6}.ATTR.instance='Cube-assembly';
abaqus_spec.Assembly.Nset{6}.VAL=VTop;

abaqus_spec.Assembly.Nset{7}.ATTR.nset='BotFace';
abaqus_spec.Assembly.Nset{7}.ATTR.instance='Cube-assembly';
abaqus_spec.Assembly.Nset{7}.VAL=VBottom;

abaqus_spec.Assembly.Elset{1}.ATTR.elset='AllElA';
abaqus_spec.Assembly.Elset{1}.ATTR.instance='Cube-assembly';
abaqus_spec.Assembly.Elset{1}.VAL=elementIds;

abaqus_spec.Assembly.Elset{2}.ATTR.elset='NodeElA';
abaqus_spec.Assembly.Elset{2}.ATTR.instance='Cube-assembly';
abaqus_spec.Assembly.Elset{2}.VAL=NodeEls;

% Elements at lattice nodes to exclude from contact
ContactExclusions=reshape( S_E(:,[1:ConExcl end-(ConExcl-1):end]) ,...
                numel(S_E(:,[1:ConExcl end-(ConExcl-1):end])),1);
abaqus_spec.Assembly.Elset{3}.ATTR.elset='ContactExclusions';
abaqus_spec.Assembly.Elset{3}.ATTR.instance='Cube-assembly';
abaqus_spec.Assembly.Elset{3}.VAL=ContactExclusions;


%%--> Material
abaqus_spec.Material{1}.ATTR.name='Steel';
abaqus_spec.Material{1}.Elastic=Opts.Material(1).Elastic;
if Opts.PlasticOn==1
    abaqus_spec.Material{1}.Plastic=Opts.Material(1).Plastic;
end



%%--> Contact
%Defining contact properties
abaqus_spec.Material{1}.Surface_Interaction.ATTR.name='IntProp-1';
abaqus_spec.Material{1}.Surface_Interaction.VAL=1;
abaqus_spec.Material{1}.Surface_Interaction.Friction.VAL=Opts.FrictionCoeff;
abaqus_spec.Material{1}.Time_Points.ATTR.NAME='Start';
abaqus_spec.Material{1}.Time_Points.VAL=0;


if Opts.StrutContact==1
% Defining strut contact automatically - abaqus finds overclosures at nodes
% and created contact exclusions at nodes
    abaqus_spec.Assembly.surface{1}.ATTR.type='ELEMENT';
    abaqus_spec.Assembly.surface{1}.ATTR.name='NoCONTACTSurf';
    abaqus_spec.Assembly.surface{1}.VAL='ContactExclusions';
    
    abaqus_spec.Material{1}.Contact.VAL='';
    abaqus_spec.Material{1}.Contact_Inclusions.ATTR.ALL_EXTERIOR='';
    abaqus_spec.Material{1}.Contact_Property_Assignment.VAL={'' ,'','IntProp-1'};
    abaqus_spec.Material{1}.Contact_Formulation.ATTR.TYPE='Edge to edge';
    abaqus_spec.Material{1}.Contact_Formulation.ATTR.Formulation='Both';
    abaqus_spec.Material{1}.Contact_Exclusions='';
    abaqus_spec.Material{1}.Contact_Exclusions.VAL='NoCONTACTSurf';  

else
% No contact between struts, only between lattice and plates
    abaqus_spec.Material{1}.Contact.VAL='';
    abaqus_spec.Material{1}.Contact_Inclusions.ATTR.ALL_EXTERIOR='';
    abaqus_spec.Material{1}.Contact_Property_Assignment.VAL={'' ,'','IntProp-1'};
end

%%--> Boudnary Conditions for initial step
% Fully Constrain bottom plate
abaqus_spec.Material{1}.Boundary{1}.VAL{1,1}={'Bottom' , [1 6]};
% Constrain top plate in all DOF except displacement in Z
abaqus_spec.Material{1}.Boundary{1}.VAL{2,1}={'Top' , 1};
abaqus_spec.Material{1}.Boundary{1}.VAL{3,1}={'Top' , 2};
abaqus_spec.Material{1}.Boundary{1}.VAL{4,1}={'Top' , [4 6]};
if Opts.BCsetting == 1  % Symmetry
    abaqus_spec.Material{1}.Boundary{1}.VAL{5,1}={'XFace' , 1};
    abaqus_spec.Material{1}.Boundary{1}.VAL{6,1}={'XFace' , [5 6]};
    abaqus_spec.Material{1}.Boundary{1}.VAL{7,1}={'YFace' , 2};
    abaqus_spec.Material{1}.Boundary{1}.VAL{8,1}={'YFace' , 4};
    abaqus_spec.Material{1}.Boundary{1}.VAL{9,1}={'YFace' , 6};
elseif Opts.BCsetting == 0   %Prevent rigid body movements
    abaqus_spec.Material{1}.Boundary{1}.VAL{5,1}={'XFace' , 1};
    abaqus_spec.Material{1}.Boundary{1}.VAL{6,1}={'YFace' , 2};
elseif Opts.BCsetting == 2   %Constrained lateral displacement top and bottom
    abaqus_spec.Material{1}.Boundary{1}.VAL{5,1}={'BotFace' ,[1 2]};
    abaqus_spec.Material{1}.Boundary{1}.VAL{6,1}={'TopFace' ,[1 2]}; 
elseif Opts.BCsetting == 3   %Constrained lateral displacement & rotation top and bottom
    abaqus_spec.Material{1}.Boundary{1}.VAL{5,1}={'BotFace' ,[1 2]};
    abaqus_spec.Material{1}.Boundary{1}.VAL{6,1}={'BotFace' ,[4 6]};
    abaqus_spec.Material{1}.Boundary{1}.VAL{7,1}={'TopFace' ,[1 2]}; 
    abaqus_spec.Material{1}.Boundary{1}.VAL{8,1}={'TopFace' ,[4 6]}; 
end


%%--> Step
abaqus_spec.Step.ATTR.name='Step-1';
abaqus_spec.Step.ATTR.nlgeom='YES';
abaqus_spec.Step.ATTR.INC=MAXIncr;
abaqus_spec.Step.Static=Opts.StepParameters;

% Boundary Conditions for step 1
abaqus_spec.Step.Boundary.ATTR.type='Displacement';
abaqus_spec.Step.Boundary.VAL={'Top',[3 3],displacementMagnitude};

% abaqus_spec.Step.controls.ATTR.Parameters='TIME INCREMENTATION';
% % all defaults except for max cutback
% abaqus_spec.Step.controls.VAL=[4,8,9,16,10,4,12,  10   ,6,3,50,50,50];
%Output
abaqus_spec.Step.Restart.ATTR.write='';
abaqus_spec.Step.Restart.ATTR.frequency=0;

abaqus_spec.Step.Output{1}.ATTR.field='';
abaqus_spec.Step.Output{1}.ATTR.variable='PRESELECT';
abaqus_spec.Step.Output{2}.ATTR.history='';
abaqus_spec.Step.Output{2}.ATTR.variable='PRESELECT';
abaqus_spec.Step.Output{3}.ATTR.field='';
%abaqus_spec.Step.Output{3}.Node_Output.VAL={'CF','RF','U'};
abaqus_spec.Step.Output{3}.Element_Output.ATTR.Directions={'Yes'};
abaqus_spec.Step.Output{3}.Element_Output.VAL={'EE','SDEG','STATUS','EVOL'};


%Nodal coordinates
abaqus_spec.Step.Node_print{1}.ATTR.nset='Top';
abaqus_spec.Step.Node_print{1}.ATTR.frequency = 1;
abaqus_spec.Step.Node_print{1}.VAL='COORD';
abaqus_spec.Step.Node_print{2}.ATTR.nset='Top';
abaqus_spec.Step.Node_print{2}.ATTR.frequency = 1;
abaqus_spec.Step.Node_print{2}.VAL='RF';


%% Write .INP File

abaqusStruct2inpBMcD(abaqus_spec,abaqusInpFileName);

%textView(abaqusInpFileName);

%% Run the job using Abaqus
tic

lockFileName=fullfile(savePath,[Opts.FileName,'.lck']);
if exist(lockFileName,'file')
    warning('Lockfile found and deleted')
    delete(lockFileName);
end

%%

oldPath=pwd; %Get current working directory
cd(savePath); %Set new working directory to match save patch

abaqusPath='abq2019';%'/usr/bin/abaqus'; %Abaqus excute command or path
runFlag=system([abaqusPath,' inp=',abaqusInpFileName,' job=',Opts.FileName,' interactive ask_delete=OFF']);

cd(oldPath); %Restore working directory


AnalysisTime=toc;
%% Import abaqus results
% Importing the abaqus .dat file 
[abaqusData]=importAbaqusDat(abaqusDATFileName);

%% Load reaction force and displacement data from top plate

timeVec=[0 abaqusData.STEP(1).INCREMENT(:).TOTAL_TIME_COMPLETED];
OvrStrain= abs(Opts.appliedStrain)*timeVec';  %get strain from time step
OvrStress=zeros(numel(timeVec),1); %Initialise stress array

for qt = 1:(numel(timeVec)-1)
    % get reaction force and calculate stress from Reaction Force/CSA
    RForce =[abaqusData.STEP(1).INCREMENT(qt).nodeOutput(2).data.RF3];
    OvrStress(qt+1) = abs(RForce)/(GeomSize(3,1)*GeomSize(3,2));  
end 


%% PLot
if Plots ==1
    %% Plot Overall Stress/strain Curve
    figure
    plot(OvrStrain,OvrStress,'-*')
    ylabel('\sigma Compressive Stress (MPa)')
    xlabel('\epsilon Strain')
end

StressStrain=[OvrStrain OvrStress];


end